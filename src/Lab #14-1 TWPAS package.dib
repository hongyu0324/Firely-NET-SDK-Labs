#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"sql","languageName":"SQL"},{"name":"value"}]}}

#!csharp

#r "nuget:hl7.fhir.r4"
#r "nuget:hl7.fhir.specification.Data.r4"
#r "nuget:Firely.Fhir.Packages"

#!csharp

using Firely.Fhir.Packages;
using Hl7.Fhir.Model;
using Hl7.Fhir.Validation;
using Hl7.Fhir.Serialization; 
using Hl7.Fhir.Rest;
using System.IO;
using Hl7.Fhir.FhirPath;

#!csharp

string igName = "pas";
string profilePath = "..\\..\\data\\profiles\\" + igName;
string profileName = "https://twcore.mohw.gov.tw/ig/" + igName + "/StructureDefinition";
//string profilePath = "..\\..\\data\\profiles\\EMR";
//string profileName = "https://twcore.mohw.gov.tw/ig-emr/twcore/StructureDefinition";

#!csharp

var tw_ig = profilePath + "\\package.tgz";

Console.WriteLine($"Loading {tw_ig}...");
FhirPackageSource  resolver = new (ModelInfo.ModelInspector, new string[] { tw_ig});
//var names = resolver.ListResourceUris();
var names = resolver.ListCanonicalUris();
var profiles = new List<String>();
var bundles = new List<String>();
var applyModel = "";
foreach (var n in names){
    try{
        if(n.StartsWith(profileName)){
            var profile = n.Split("/").Last();
            if(profile.Contains("Bundle")){
                bundles.Add(profile);
            }
            else if(profile.Contains("ApplyModel")){
                applyModel = profile;
            }
            else{
                profiles.Add(profile);
            }
        }
    }
    catch (Exception e){
        Console.WriteLine($"Error processing {n}: {e.Message}");
    }


}

// print all profiles

foreach (var n in profiles){
    Console.WriteLine(n);
}

#!csharp

string getProfileName(string name){
    name = name.ToLower();
    foreach (var n in profiles){
        var p = n.Replace("-", "");
        p = p.Replace("twpas", "");
        p = "twpas" + p;
        p = p.ToLower();
        if( p == name){
            return n;
        }
    }
    return name;
}

#!csharp

StructureDefinition applyModelDef = await resolver.ResolveByUriAsync("StructureDefinition/" + applyModel) as StructureDefinition;
List<Tuple<string, string,string,string>> qList = new List<Tuple<string, string,string,string>>();

foreach (var e in applyModelDef.Differential.Element){
    
    var elementList = e.Path.Split('.').ToList();
    if (elementList.Count > 1){
        if(elementList.Count == 2){
            //Console.WriteLine(("\n"));
        }
        //Console.WriteLine($" {e.Definition} {e.Path} {e.Type.FirstOrDefault()?.Code} {e.Min} {e.Max} {e.Slicing?.Discriminator?.FirstOrDefault()?.Path} {e.Slicing?.Discriminator?.FirstOrDefault()?.Type}");
        var map = e.Mapping;
        foreach (var m in map){
            //Console.WriteLine($"{"  "} {m.Identity} {m.Map}");
            // get profile name from profiles list 
            if (e.Path.StartsWith("ApplyModel.gene") && elementList.Count > 2){
                string q3 = m.Map;
                // 移除q3中，最後一個()中的中文字
                if (q3.Contains("(")){
                    int start = q3.LastIndexOf("(");
                    int end = q3.LastIndexOf(")");
                    if (start > 0 && end > start){
                        q3 = q3.Remove(start, end - start + 1);
                    }
                }
                var q = new Tuple<string, string,string,string>(e.Definition + " | " + e.Path.Replace("ApplyModel.gene.",""), getProfileName(m.Identity) ,  q3 , e.Type.FirstOrDefault()?.Code); 
                qList.Add(q);
            }
            
        }
    }
}  

// print out qList

foreach (var q in qList){
    Console.WriteLine($"{q.Item1} {q.Item2} {q.Item3} {q.Item4}");
}

#!csharp

StructureDefinition sd = await resolver.ResolveByUriAsync("StructureDefinition/Observation-diagnostic-twpas") as StructureDefinition;
// 根據ApplyModel的定義，產生一個Questionnaire
var questionnaire = new Questionnaire();

questionnaire.Name = "Observation Diagnostic TWPAS";
questionnaire.Title = "Observation Diagnostic TWPAS";
questionnaire.Status = PublicationStatus.Active;
questionnaire.Publisher = "大同醫護股份有限公司";
questionnaire.Description = "基因檢測問卷";

questionnaire.Contact = new List<ContactDetail>();
var contact = new ContactDetail();
contact.Name = "大同醫護股份有限公司";
contact.Telecom = new List<ContactPoint>();
var telecom = new ContactPoint();
telecom.System = ContactPoint.ContactPointSystem.Url;
telecom.Value = "https://tmhtc.net/";
contact.Telecom.Add(telecom);
questionnaire.Contact.Add(contact);

var item1 = new Questionnaire.ItemComponent();
item1.LinkId = "1";
item1.Text = "基因資訊";
item1.Type = Questionnaire.QuestionnaireItemType.Group;
item1.Item = new List<Questionnaire.ItemComponent>();
questionnaire.Item.Add(item1);

string itemText = "";
foreach (var q in qList){
    if(itemText != q.Item1){
        itemText = q.Item1;
    }else{
        continue;
    }
    var item = new Questionnaire.ItemComponent();
    item.LinkId = "1." + (item1.Item.Count + 1).ToString();
    

    item.Text = q.Item1;
    // 根據item4內容，判斷Type

    if (q.Item4 == "string"){
        item.Type = Questionnaire.QuestionnaireItemType.String;
    }

    else if (q.Item4 == "dateTime"){
        item.Type = Questionnaire.QuestionnaireItemType.DateTime;
    }
    else if (q.Item4 == "CodeableConcept"){
        item.Type = Questionnaire.QuestionnaireItemType.Choice;
        //item.AnswerValueSet = getCodeUrlbyFHIRPath(sd,q.Item3);
        //var binding = sd.Select("differential.element.where(path = 'Observation" + q.Item3+ "').binding").FirstOrDefault() as Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent; 
        //item.AnswerValueSet = binding.ValueSet;  
    }
    else{
        item.Type = Questionnaire.QuestionnaireItemType.String;
    }

    item.Required = true;
    item1.Item.Add(item);
}
// 根據ApplyModel的定義，產生一個Questionnaire.ItemComponent
// 這裡的ItemComponent是根據ApplyModel的定義來產生的，並不是隨便亂寫的

/*
var item2 = new Questionnaire.ItemComponent();
item2.LinkId = "1.1";
item2.Text = "基因檢測代碼";
item2.Type = Questionnaire.QuestionnaireItemType.String;
item2.Initial = new List<Questionnaire.InitialComponent>();
var initial = new Questionnaire.InitialComponent();
initial.Value = new FhirString("69548-6");
item2.Initial.Add(initial);
item2.Required = true;
item.Item.Add(item2);

var item3 = new Questionnaire.ItemComponent();
item3.LinkId = "1.2";
item3.Text = "基因檢測日期";
item3.Type = Questionnaire.QuestionnaireItemType.Date;
item3.Required = true;
item.Item.Add(item3);

var item4 = new Questionnaire.ItemComponent();
item4.LinkId = "1.3";
item4.Text = "基因檢測分析結果";
item4.Type = Questionnaire.QuestionnaireItemType.Choice;
item4.AnswerValueSet = "http://loinc.org/vs/LL1971-2";
item4.Required = true;
item.Item.Add(item4);

var item5 = new Questionnaire.ItemComponent();
item5.LinkId = "1.4";
item5.Text = "基因臨床判讀結果";
item5.Type = Questionnaire.QuestionnaireItemType.Choice;
item5.AnswerOption = new List<Questionnaire.AnswerOptionComponent>();
item5.AnswerValueSet = "http://terminology.hl7.org/ValueSet/v3-ObservationInterpretation";
item5.Required = true;
item.Item.Add(item5);

var item6 = new Questionnaire.ItemComponent();
item6.LinkId = "1.5";
item6.Text = "基因檢測方法";
item6.Type = Questionnaire.QuestionnaireItemType.Choice;
item6.AnswerValueSet = "http://loinc.org/vs/LL1971-2";
item6.Required = true;
item.Item.Add(item6);


var item7 = new Questionnaire.ItemComponent();
item7.LinkId = "1.6";
item7.Text = "基因檢測代碼";
item7.Type = Questionnaire.QuestionnaireItemType.Choice;
item7.AnswerValueSet = "https://twcore.mohw.gov.tw/ig/pas/ValueSet/gene-test-code";
item7.Required = true;
item.Item.Add(item7);

var item8 = new Questionnaire.ItemComponent();
item8.LinkId = "1.7";
item8.Text = "基因突變類型";
item8.Type = Questionnaire.QuestionnaireItemType.Choice;
item8.AnswerValueSet = "https://twcore.mohw.gov.tw/ig/pas/ValueSet/dna-change-type";
item8.Required = true;
item.Item.Add(item8);
*/

FhirJsonSerializer serializer = new FhirJsonSerializer(new SerializerSettings()
{
    Pretty = true,
});
string pat_Json = serializer.SerializeToString(questionnaire);
Console.WriteLine(pat_Json);

#!csharp

string profileName = "Observation-diagnostic-twpas";

StructureDefinition pd = await resolver.ResolveByUriAsync("StructureDefinition/" + profileName) as StructureDefinition;

//interpretation.coding.code
//var binding = pd.Select("differential.element.where(path = 'Observation.interpretation').binding").FirstOrDefault() as Hl7.Fhir.Model.ElementDefinition.ElementDefinitionBindingComponent; 

//Console.WriteLine(binding.ValueSet);


//Console.WriteLine($"Version: {versionStr}");

pd

#!csharp

foreach (var bun in bundles){
   //string bundleName = "Bundle-response-twpas";

    //find resource by id or by canonical uris
    StructureDefinition tw_bundle = await resolver.ResolveByUriAsync("StructureDefinition/" + bun) as StructureDefinition;
    var listBundleProfiles = new List<Tuple<bool,string,string>>();
    string element ="";
    bool isRequired = false;

    foreach(var n in tw_bundle.Differential.Element){
        var n_list = n.ElementId.Split(".");
        if ( n_list.Count() == 2 && n.ElementId.Contains(":") == false ){
            if(n.Min > 0){
                Console.WriteLine( n.ElementId  + "   " + n.Min + "."+ n.Max + "  - " + n.Short);
            }  
        }
        else if (n.ElementId.Contains(":")){
            var n_list2 = n.ElementId.Split(":");
        
            if(n_list2[0] == "Bundle.entry"){
                int level = n_list2[1].Count(x => x == '.') - 1;
                if (level < 0) {
                    isRequired = n.Min > 0;
                    element = n.ElementId;
                }
                else{
                    string profile = n.Type[0].Profile.First().Split("/").Last();
                    // new profile Tuple
                    listBundleProfiles.Add(new Tuple<bool,string,string>(isRequired,element,profile));
                    element = "";
                }
            }
        }
    }
    Console.WriteLine(tw_bundle.Description);
    Console.WriteLine("------");

    listBundleProfiles = listBundleProfiles.OrderByDescending(x => x.Item1).ToList();
    foreach(var p in listBundleProfiles){
        Console.WriteLine(p.Item1 + " " + p.Item2 + " " + p.Item3);
    }
}

#!markdown

分析StructureDefinition內容，統計每一個profile所需要之Reference數量

#!csharp

var profileList = new List<Tuple<string,int,int,List<Tuple<bool,string,string>>>>();
foreach (var p in profiles){

    StructureDefinition twpas_profile = await resolver.ResolveByUriAsync("StructureDefinition/" + p) as StructureDefinition;

    int countTrue = 0;
    int countFalse = 0;

    var refList = new List<Tuple<bool,string,string>>();
     
    List<bool> listRequired = new List<bool>();
    for(int i = 0; i < 10; i++){
        listRequired.Add(false);
    }
    bool isRequired = false;

    foreach(var n in twpas_profile.Snapshot.Element){
    //foreach(var n in twpas_profile.Differential.Element){
        // find resource refernce for each profile
        
        int level = n.Path.Count(x => x == '.') - 1;
        if (level < 0) continue;
        listRequired[level] = n.Min > 0;
        isRequired = n.Min > 0;
        for(int i = 0; i < level; i++){
            isRequired = isRequired & listRequired[i];
        }
        if(isRequired == false){
            // continue;
        }
        
        //if( n.Min > 0 && n.Type.Count() > 0 && n.Type[0].Code == "Reference"){
        if( n.Type.Count() > 0 && n.Type[0].Code == "Reference"){
            refList.Add(new Tuple<bool,string,string>(isRequired,n.Path,n.Type[0].TargetProfile.First().Split("/").Last()));
            if(isRequired) countTrue++;
            else countFalse++;
            //Console.WriteLine(n.Path + "  " + n.Type[0].TargetProfile.First().Split("/").Last());
        }

        // refList order by isRequired desc
        refList = refList.OrderByDescending(x => x.Item1).ToList();
        
    }
    profileList.Add(new Tuple<string,int,int,List<Tuple<bool,string,string>>>(p,countTrue,countFalse,refList));
}

// print out the result
foreach(var p in profileList){
    Console.WriteLine(p.Item1 + "  " + p.Item2 + "  " + p.Item3);
    foreach(var r in p.Item4){
        Console.WriteLine(r.Item1 + "  " + r.Item2 + "  " + r.Item3);
    }
    Console.WriteLine();
}

#!markdown

根據Profile名稱，取得該profile所需要的reference數目以及reference所對應之profile

#!csharp

// funtion to get the reference count by profile
Tuple<int,List<string>> getReferenceCount(string profile, List<Tuple<string,int,int,List<Tuple<bool,string,string>>>> list){
    int count = 0;
    List<string> refList = new List<string>();
    foreach(var l in list){
        if(l.Item1 == profile){
            count = l.Item2 + l.Item3;
            foreach(var r in l.Item4){
                refList.Add(r.Item3);
            }
            break;
        }
    }
    return new Tuple<int,List<string>>(count,refList);
}

#!markdown

取得範例資料以及匯入資料所需要的相關資訊

#!csharp

var parser = new FhirJsonParser();


var exampleDir = profilePath +"\\package\\example";

var exampleFiles = Directory.GetFiles(exampleDir);



var exampleResources = new List<Resource>();
var exampleProfiles = new List<Tuple<Resource,string,string,int,List<string>>>();

foreach(var f in exampleFiles){
    var content = File.ReadAllText(f);
    var resource = parser.Parse<Resource>(content);
    //Console.WriteLine(resource.TypeName);

    if(resource.TypeName == "Bundle"){
        Console.WriteLine($"Bundle {f}");
        continue;
    } 
    if(resource.TypeName == "OperationOutcome") continue;
    try{
        if(resource.Meta == null || resource.Meta.Profile == null || resource.Meta.Profile.Count() == 0) continue;
    }
    catch (Exception e){
        Console.WriteLine($"Error processing {f}: {e.Message}");
        continue;
    }
    string profile = resource.Meta.Profile.First().Split("/").Last();
    Tuple<int,List<string>> refCount = getReferenceCount(profile,profileList);
    exampleProfiles.Add(new Tuple<Resource,string,string,int,List<string>>(resource,profile,f,refCount.Item1,refCount.Item2));
}
// exampleProfiles order by refCount asc
exampleProfiles = exampleProfiles.OrderBy(x => x.Item4).ToList();

foreach(var p in exampleProfiles){
    string output = "";
    output = p.Item2 + " " + p.Item4 + " --- ";
    foreach(var r in p.Item5){
        output += r + " ";
    }
    Console.WriteLine(output);
}

#!markdown

取得每一個profile可能需要的reference以及對應之FHIRPath

#!csharp

// function to get FHIRPath expression
List<Tuple<string,string>> getFhirPath(string profile, List<Tuple<string,int,int,List<Tuple<bool,string,string>>>> list){
    List<Tuple<string,string>> fhirPathList = new List<Tuple<string,string>>();

    foreach(var l in list){
        if(l.Item1 == profile){
            foreach(var r in l.Item4){
                //Console.WriteLine(r.Item2 + "  " + r.Item3);
                var targetProfile = r.Item3;
                fhirPathList.Add(new Tuple<string,string>(r.Item2,targetProfile));
            }
            break;
        }
    }
    return fhirPathList;
}

#!markdown

排定匯入資料的順序

#!csharp

// save the example resources to fhir server

var result = new List<Tuple<string,string>>();

List<string> readyList = new List<string>();
List<string> readyFile = new List<string>();
List<Resource> readyResource = new List<Resource>();

Console.WriteLine(exampleProfiles.Count + " example profiles");

int loop = 0;
while(readyList.Count < exampleProfiles.Count){

    foreach(var p in exampleProfiles){
        if( readyFile.Contains((p.Item3)) == true) continue;

        var resource = p.Item1;
        var id = resource.Id;
        
        List<Tuple<string,string>> fhirPathList = getFhirPath(p.Item2,profileList);
        bool isReady = true;
        foreach(var r in fhirPathList){
            bool isExist = resource.IsTrue(r.Item1);
            if(isExist == true){
                string targetProfile = r.Item2;
                if (targetProfile == "Practitioner") targetProfile = "Practitioner-twpas";
                if(readyList.Contains(targetProfile) == false){
                    isReady = false;
                    break;
                }
            }   
        }
        if(isReady == true){
            readyList.Add(p.Item2);
            readyFile.Add(p.Item3);
            readyResource.Add(resource);
        } 
    }
    loop++;
    if(loop > 10) break;
}

//ready file order by file name

/*
readyFile = readyFile.OrderBy(x => x).ToList();
foreach(var f in readyFile){
    Console.WriteLine(f);
}

readyList = readyList.OrderBy(x => x).ToList();
foreach(var f in readyList){
    Console.WriteLine(f);
}
*/

// print count of the ready resources
Console.WriteLine(readyList.Count + " ready resources");

// print out the ready resources
foreach(var r in readyResource){
    Console.WriteLine(r.TypeName + " " + r.Id);
}

#!csharp

//save the resources to fhir server
/*
var client = new FhirClient("http://localhost:8080/fhir");

var resultList = new List<Tuple<string,string>>();
foreach(var r in readyResource){
    var resource = r;
    var id = resource.Id;
    try{
        var response = await client.UpdateAsync(resource);
        resultList.Add(new Tuple<string,string>(resource.TypeName,resource.Id));
    }catch(Exception e){
        Console.WriteLine(e.Message);
    }
}
*/
