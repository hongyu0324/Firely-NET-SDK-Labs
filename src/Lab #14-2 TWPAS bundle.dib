#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

#r "nuget:hl7.fhir.r4"
#r "nuget:hl7.fhir.specification.Data.r4"
#r "nuget:Firely.Fhir.Packages"

#!csharp

using Firely.Fhir.Packages;
using Hl7.Fhir.Model;
using Hl7.Fhir.Validation;
using Hl7.Fhir.Serialization; 
using Hl7.Fhir.Rest;
using System.IO;
using Hl7.Fhir.FhirPath;

#!csharp

string profilePath = "..\\..\\data\\profiles\\PAS\\V1.0.1";
string profileName = "https://twcore.mohw.gov.tw/ig/pas/StructureDefinition";
//string profilePath = "..\\..\\data\\profiles\\EMR";
//string profileName = "https://twcore.mohw.gov.tw/ig-emr/twcore/StructureDefinition";

#!csharp

var tw_pas = profilePath + "\\package.tgz";
FhirPackageSource  resolver = new (ModelInfo.ModelInspector, new string[] { tw_pas});
//var names = resolver.ListResourceUris();
var names = resolver.ListCanonicalUris();
var profiles = new List<String>();
foreach (var n in names){
    if(n.StartsWith(profileName)){
        var profile = n.Split("/").Last();
        profiles.Add(profile);
    }
    
}

// print all profiles
foreach (var n in profiles){
    Console.WriteLine(n);
}

#!csharp

var profileList = new List<Tuple<string,int,int,List<Tuple<bool,string,string>>>>();
foreach (var p in profiles){

    StructureDefinition twpas_profile = await resolver.ResolveByUriAsync("StructureDefinition/" + p) as StructureDefinition;

    int countTrue = 0;
    int countFalse = 0;

    var refList = new List<Tuple<bool,string,string>>();
     
    List<bool> listRequired = new List<bool>();
    for(int i = 0; i < 10; i++){
        listRequired.Add(false);
    }
    bool isRequired = false;

    foreach(var n in twpas_profile.Snapshot.Element){
    //foreach(var n in twpas_profile.Differential.Element){
        // find resource refernce for each profile
        
        int level = n.Path.Count(x => x == '.') - 1;
        if (level < 0) continue;
        listRequired[level] = n.Min > 0;
        isRequired = n.Min > 0;
        for(int i = 0; i < level; i++){
            isRequired = isRequired & listRequired[i];
        }
        if(isRequired == false){
            // continue;
        }
        
        //if( n.Min > 0 && n.Type.Count() > 0 && n.Type[0].Code == "Reference"){
        if( n.Type.Count() > 0 && n.Type[0].Code == "Reference"){
            refList.Add(new Tuple<bool,string,string>(isRequired,n.Path,n.Type[0].TargetProfile.First().Split("/").Last()));
            if(isRequired) countTrue++;
            else countFalse++;
            //Console.WriteLine(n.Path + "  " + n.Type[0].TargetProfile.First().Split("/").Last());
        }

        // refList order by isRequired desc
        refList = refList.OrderByDescending(x => x.Item1).ToList();
        
    }
    profileList.Add(new Tuple<string,int,int,List<Tuple<bool,string,string>>>(p,countTrue,countFalse,refList));
}

// print out the result
foreach(var p in profileList){
    Console.WriteLine(p.Item1 + "  " + p.Item2 + "  " + p.Item3);
    foreach(var r in p.Item4){
        Console.WriteLine(r.Item1 + "  " + r.Item2 + "  " + r.Item3);
    }
    Console.WriteLine();
}

#!csharp

string bundleName = "Bundle-twpas";
//string bundleName = "Bundle-response-twpas";

//find resource by id or by canonical uris
StructureDefinition twpas_bundle = await resolver.ResolveByUriAsync("StructureDefinition/" + bundleName) as StructureDefinition;
var listBundleProfiles = new List<Tuple<bool,string,string>>();
string element ="";
bool isRequired = false;

foreach(var n in twpas_bundle.Differential.Element){
    var n_list = n.ElementId.Split(".");
    if ( n_list.Count() == 2 && n.ElementId.Contains(":") == false ){
        if(n.Min > 0){
            Console.WriteLine( n.ElementId  + "   " + n.Min + "."+ n.Max + "  - " + n.Short);
        }  
    }
    else if (n.ElementId.Contains(":")){
        var n_list2 = n.ElementId.Split(":");
        
        if(n_list2[0] == "Bundle.entry"){
            int level = n_list2[1].Count(x => x == '.') - 1;
            if (level < 0) {
                isRequired = n.Min > 0;
                element = n.ElementId;
            }
            else{
                string profile = n.Type[0].Profile.First().Split("/").Last();
                // new profile Tuple
                listBundleProfiles.Add(new Tuple<bool,string,string>(isRequired,element,profile));
                element = "";
            }
        }
    }
}
Console.WriteLine(twpas_bundle.Description);
Console.WriteLine("------");

listBundleProfiles = listBundleProfiles.OrderByDescending(x => x.Item1).ToList();
foreach(var p in listBundleProfiles){
    Console.WriteLine(p.Item1 + " " + p.Item2 + " " + p.Item3);
}

#!csharp

// funtion to get the reference count by profile
// function to get FHIRPath expression
List<Tuple<string,string>> getFhirPath(string profile, List<Tuple<string,int,int,List<Tuple<bool,string,string>>>> list){
    List<Tuple<string,string>> fhirPathList = new List<Tuple<string,string>>();

    foreach(var l in list){
        if(l.Item1 == profile){
            foreach(var r in l.Item4){
                //Console.WriteLine(r.Item2 + "  " + r.Item3);
                var targetProfile = r.Item3;
                fhirPathList.Add(new Tuple<string,string>(r.Item2,targetProfile));
            }
            break;
        }
    }
    return fhirPathList;
}

#!csharp

var refList = getFhirPath("Claim-twpas", profileList);

// print out the result
foreach(var p in refList){
    Console.WriteLine(p.Item1 + "  " + p.Item2);
}

#!csharp

List<ResourceReference> GetResourceReferences(Resource resource,List<Tuple<string,string>> refList)
{
    bool checkList = false;
    string listPath = "";
    var listPathList = new List<string>();
    foreach(var r in refList){
        bool isExist = false;
        var path = r.Item1;
        if (path.EndsWith("[x]")){
            checkList = true;
            listPath = path.Substring(0, path.Length - 3);
        }
        else{
            isExist = resource.IsTrue(path);
        }
        var targetProfile = r.Item2;
    
        if(isExist){
            var reference = resource.Select(path).ToList();
            ResourceReference a = (ResourceReference)reference.First();
            listPathList.Add(a.Reference);
            //Console.WriteLine("Reference: " + a.Reference );
        }
    }

    if(checkList){
        var list = resource.Select(listPath).ToList();
        foreach(var l in list){
            var reference = l as ResourceReference;
            if(reference != null){
                //Console.WriteLine("Reference: " + reference.Reference );
                listPathList.Add(reference.Reference);
            }
        }
    }

    // listPathList order by profile name
    listPathList = listPathList.OrderBy(x => x).ToList();
    var resourceReferenceList = new List<ResourceReference>();
    foreach(var l in listPathList){
        var reference = new ResourceReference(l);
        resourceReferenceList.Add(reference);
    }
    return resourceReferenceList;
}

#!csharp

// Read all Claims resource from FHIR Server http://localhost:8080/fhir

string fhirServer = "http://localhost:8080/fhir";
string resourceType = "Claim";


var client = new FhirClient(fhirServer);
var searchParams = new SearchParams()
    .Where("status=active");
var searchResult = await client.SearchAsync<Claim>(searchParams);

var claims = searchResult.Entry.Select(e => e.Resource as Claim).ToList();

List<Resource> resourceList = new List<Resource>();

Claim claim = claims[0];
resourceList.Add(claim);

Console.WriteLine("Claim ID: " + claim.Id);
bool checkList = false;
List<ResourceReference> listPathList = new List<ResourceReference>();
listPathList = GetResourceReferences(claim,refList);

// print out the result
foreach(var p in listPathList){
    // get the resource by reference
    var resource = await client.ReadAsync<Resource>(p.Reference);

    if(resource != null){
        //add resource to the bundle
        resourceList.Add(resource);
    }
}
/*
foreach(Resource r in resourceList){
    List<ResourceReference> listPathList2 = new List<ResourceReference>();
    listPathList2 = GetResourceReferences(r,refList);
    // print out the listPathList2
    foreach(var p in listPathList2){
        Console.WriteLine("Resource ID: " + p.Reference);
    }
    
    foreach(var p in listPathList2){
        // get the resource by reference
        var resource = await client.ReadAsync<Resource>(p.Reference);
        if(resource != null && resourceList.Contains(resource) == false){
            //add resource to the bundle
            Console.WriteLine("Resource ID: " + resource.Id);
        }
    }
}
*/
// create a bundle
var bundle = new Bundle
{
    Type = Bundle.BundleType.Collection,
    Id = "bundle-" + DateTime.Now.ToString("yyyyMMdd-HHmmss"),
    Timestamp = DateTimeOffset.Now,
    Total = resourceList.Count,
    Entry = new List<Bundle.EntryComponent>()
};
foreach (var resource in resourceList)
{
    var entry = new Bundle.EntryComponent
    {
        Resource = resource
    };
    bundle.Entry.Add(entry);
}

Console.WriteLine("Number of entries: " + bundle.Entry.Count);
foreach(var e in bundle.Entry){
    var resource = e.Resource;
    Console.WriteLine("Resource ID: " + resource.Id);
}

var serializer = new FhirJsonSerializer(new SerializerSettings { Pretty = true });
// save the bundle to a json string
string bundleJson = serializer.SerializeToString(bundle);

//print out the bundle json
//Console.WriteLine(bundleJson);

#!csharp

var parser = new FhirJsonParser();

// open all example file from D:\Hongyu\Project\data\profiles\PAS\V1.0.1\package\example directory
var exampleDir = profilePath +"\\package\\example";
var exampleFiles = Directory.GetFiles(exampleDir);
var exampleResources = new List<Resource>();
List<Resource> bundleList = new List<Resource>();
foreach(var f in exampleFiles){
    var content = File.ReadAllText(f);
    var resource = parser.Parse<Resource>(content);
    //Console.WriteLine(resource.TypeName);

    if(resource.TypeName == "Bundle"){
        bundleList.Add(resource);
        continue;
    }
}

// print out the bundle resource
foreach(var b in bundleList){
    var bundleResource = b as Bundle;
    if(bundleResource != null){
        Console.WriteLine("Bundle ID: " + bundleResource.Id);
        //print out number of entries
        Console.WriteLine("Number of entries: " + bundleResource.Entry.Count);
        foreach(var e in bundleResource.Entry){
            var resource = e.Resource;
            Console.WriteLine("Resource ID: " + resource.Id);
        }
    }
}
