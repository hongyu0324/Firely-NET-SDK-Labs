#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!csharp

#r "nuget:hl7.fhir.r4"

#!csharp

using Hl7.Fhir.Model; 
using Hl7.Fhir.Rest;
using Hl7.Fhir.Serialization;
using System.IO;

var client = new FhirClient("http://localhost:8080/fhir");

#!csharp

String line;
String json =""; 
try
{
    //Pass the file path and file name to the StreamReader constructor
    StreamReader sr = new StreamReader("C:\\Project\\fhir\\polygolt_book\\MI-TW_Track2_examples.json");
    //Read the first line of text
    line = sr.ReadLine();
    //Continue to read until you reach end of file
    while (line != null)
    {
        //write the line to console window
        json = json + line;
        //Read the next line
        line = sr.ReadLine();
    }
    //close the file
    sr.Close();
    // Console.WriteLine(json);
}
catch(Exception e)
{
    Console.WriteLine("Exception: " + e.Message);
}
finally
{
    Console.WriteLine("Executing finally block.");
}

#!csharp

var parser = new FhirJsonParser();
try
{
    var bundle = parser.Parse<Bundle>(json);
    Console.WriteLine(bundle.Entry.Count.ToString());
    foreach(var r in bundle.Entry){
        Console.WriteLine(r.Resource.TypeName);
    }
}
catch (FormatException fe)
{
    Console.WriteLine("Exception: " + fe.Message);
}

#!csharp

var location_A = new Uri("http://localhost:8080/fhir/Patient/9869");
var pat_A = new Patient();
pat_A = await client.ReadAsync<Patient>(location:location_A);
if (pat_A != null){
    Console.WriteLine(pat_A.Name[0].Family + pat_A.Name[0].Given.First());
}

#!csharp

// create a FHIR JSON serializer, using pretty-printing (nice formatting)
FhirJsonSerializer serializer = new FhirJsonSerializer(new SerializerSettings()
{
    Pretty = true,
});
string pat_Json = serializer.SerializeToString(pat_A);
Console.WriteLine(pat_Json);
